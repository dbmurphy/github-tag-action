Index: action.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/action.yml b/action.yml
--- a/action.yml	(revision dbd80d2e9d640266d8fe579d11ab9896ed618e16)
+++ b/action.yml	(revision 00f4a1b433bea1ba96c97b7b17bffbfb0e956381)
@@ -59,6 +59,10 @@
     description: "Do not perform tagging, just calculate next version and changelog, then exit."
     required: false
     default: "false"
+  commit_method:
+    description: "We can fetch commits comparison form tag or from PR's base, default is from a 'tag'. Anything else assume PR"
+    required: false
+    default: "tag"
 
 runs:
   using: "node16"
Index: src/action.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/action.ts b/src/action.ts
--- a/src/action.ts	(revision dbd80d2e9d640266d8fe579d11ab9896ed618e16)
+++ b/src/action.ts	(revision 8481c53aff528f96e3afe06e19d9b43a7097542a)
@@ -1,4 +1,5 @@
 import * as core from '@actions/core';
+import { context } from '@actions/github';
 import { gte, inc, parse, ReleaseType, SemVer, valid } from 'semver';
 import { analyzeCommits } from '@semantic-release/commit-analyzer';
 import { generateNotes } from '@semantic-release/release-notes-generator';
@@ -29,6 +30,7 @@
     core.getInput('create_annotated_tag')
   );
   const dryRun = core.getInput('dry_run');
+  const commitMethod = core.getInput('commit_method');
   const customReleaseRules = core.getInput('custom_release_rules');
   const shouldFetchAllTags = core.getInput('fetch_all_tags');
   const commitSha = core.getInput('commit_sha');
@@ -121,7 +123,15 @@
     core.setOutput('previous_version', previousVersion.version);
     core.setOutput('previous_tag', previousTag.name);
 
-    commits = await getCommits(previousTag.commit.sha, commitRef);
+    if (commitMethod == 'tag') {
+      commits = await getCommits(previousTag.commit.sha, commitRef);
+    } else if (isPullRequest) {
+      const baseRef = context?.payload?.pull_request?.base?.sha;
+      commits = await getCommits(baseRef, commitRef);
+    } else {
+      core.setFailed('commitMethod is not "tag" but we are not in a PR.');
+      return;
+    }
 
     let bump = await analyzeCommits(
       {

